// (ATB)

plugins {
    id "fr.putnami.gwt" version "0.4.0"
    id 'info.solidsoft.pitest' version '1.3.0'
    id "checkstyle"
    id "findbugs"
}

apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

//Java version compatibility to use when compiling Java source.
sourceCompatibility = 1.8
//Java version to generate classes for.
targetCompatibility = 1.8
//Script Version
version = '1.0'
 
repositories { 
	mavenCentral() 
    flatDir { dirs "lib" }
    jcenter()
}

configurations {
   moreLibs
}

dependencies {
 	testCompile 'junit:junit:4.12'
 	testCompile 'org.easymock:easymock:2.5.2'
	testCompile 'com.google.gwt:gwt-dev:2.8.1'
	//compile 'mysql:mysql-connector-java:6.0.5'
	implementation 'mysql:mysql-connector-java:8.0.17'
    implementation 'org.postgresql:postgresql:42.2.10'
	compile 'com.puppycrawl.tools:checkstyle:8.27'
}

war {
    from 'src/main' // adds a file-set to the root of the archive
    webInf { from 'src/main/webapp/WEB-INF' } // adds a file-set to the WEB-INF dir.
    webXml = file('src/main/webapp/WEB-INF/web.xml') // copies a file to WEB-INF/web.xml
    classpath fileTree('additionalLibs') // adds a file-set to the WEB-INF/lib dir.
    classpath configurations.moreLibs // adds a configuration to the WEB-INF/lib dir.
    classpath configurations.compile
}


task renderPlantUml(type: RenderPlantUmlTask){
	println "RenderPlantUml Executed! "
}

javadoc {
    source = sourceSets.main.allJava
    options.addStringOption("sourcepath", "$projectDir/src/main/java")
    options.overview = "src/main/javadoc/overview.html" // relative to source root
    
}
javadoc.dependsOn(renderPlantUml)

// If we woant to use the default ant build inside gradle
// ant.importBuild "build.xml"

putnami{

	module 'pt.isep.cms.Showcase'
	//module 'com.google.gwt.sample.contacts.Contacts'
	
	/** add gwt nature on eclipse project. require apply plugin: 'eclipse' to work. default : false*/
	googlePluginEclipse = true
	
	gwtVersion='2.8.1'
	
	compile {
		sourceLevel = '1.8'
	}
	
	jetty {
        /** enable debugging. */
        debugJava = true
        /** debug port to listen. */
        debugPort = 8000
        /** wait for debugger attachment. */
        debugSuspend = false
    }
}

// Jacoco
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
}

// This task generates the coverage report for the integration tests.
// Notice that it only includes data about the server code sice Jaccoco is not able to get data about cliente code that is transpiled to javascript
task jacocoIntegrationReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	sourceSets sourceSets.main
	
    executionData = files("${buildDir}/jacoco/integrationTest.exec")
    
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
}

// Integration Tests
task integrationTest(type: Test) {
	filter { 
		//all GWT unit tests, by naming convention
      	includeTestsMatching "*GWTTest*"
	}    
    jacoco { 
    		append = true
    		enabled = true
    		//classDumpFile = file("${buildDir}/jacoco/classpathdumps")
    		
    		excludes = ["com/steadystate/**"] 
    }
    // These Properties are required to run gwt integration tests
    systemProperties['gwt.args'] = "-devMode -logLevel WARN -war www-test"
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

// Unit Tests
test { 
	filter { 
		//all JRE unit tests, by naming convention
      	includeTestsMatching "*JRETest*"
	}
    jacoco { 
    		append = true
    		enabled = true
  		//classDumpFile = file("${buildDir}/jacoco/classpathdumps")
    }	
}

pitest {
	targetClasses = ['pt.isep.cms.*']
	outputFormats = ['XML','HTML']
}



// Checkstyle
checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    //toolVersion = '8.39'
    toolVersion = '8.27'
	checkstyleTest.enabled = true
	showViolations = false
	sourceSets = []
}

checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}


tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
        html.enabled true
        html.stylesheet resources.text.fromFile('config/xsl/checkstyle-simple-check-style.xsl')
        //html.destination rootProject.file("build/reports/checkstyle.html")
    }
    // retirado de https://bit.ly/34Hj1gT
	def maxWarnings = 7500
	doLast {
		reports.all { report ->
			def outputFile = report.destination
			if (outputFile.exists()) {
				def count = outputFile.text.count("<error ")
				if (count > maxWarnings) {
					throw new GradleException("[Threshold=$maxWarnings] There were $count checkstyle warnings! Check $outputFile")
				}
			}
		}
	}
}

// Findbugs
findbugs {
    ignoreFailures = true
    toolVersion = '3.0.1'
    excludeFilter = file("config/findbugs/excludeFilter.xml")
    //reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
	reportLevel  = "low"
	sourceSets=[]
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
		html.stylesheet resources.text.fromFile('config/xsl/checkstyle-simple-find-bugs.xsl')
    }
}

task deleteAppContainer(type: Exec) {
	commandLine 'docker', 'container', 'rm', '-f', 'cms_students_app'
}
task deleteDBContainer(type: Exec) {
	commandLine 'docker', 'container', 'rm', '-f', 'odsoft_db'
}
task deleteContainers() {}
deleteContainers.dependsOn(deleteAppContainer,deleteDBContainer)
task cmsRun(type: Exec) {
	commandLine 'docker-compose', 'up', '--build'
}
cmsRun.dependsOn(deleteContainers,clean,war)