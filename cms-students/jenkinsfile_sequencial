#!/usr/bin/env groovy 

def projectName = 'cms-student-seq-pipeline'

def gitCred = 'bitbucket-creds'
def gitRepo = 'bitbucket.org/1160929/odsoft-m1b_g1.git'
def gitBranch = 'master'
def gitUsername = "1160929"

def cmsPath = 'cms-students'
def warPath = 'build/libs/cms-students-1.0.war'
def javadocPath = 'build/docs/javadoc/'

def unitTestReport = 'build/reports/test'
def unitTestResults = 'build/test-results/test'
def integrationTestResults = 'build/test-results/integrationTest'
def mutationTestResults = 'build/reports/pitest'

def jenkinsBuildFolder = "/var/lib/jenkins/jobs/SequencialPipelineCA2/builds"
def jenkinsArchiveFolder = "archive"
def artifactBuildPath = "build/libs/cms-students-1.0.war" 
def artifactDeployPath = "/opt/tomcat/webapps/cms-students-sps.war" 
def cmsHttp = 'http://127.0.0.1:8091/cms-students-sps/'

pipeline {
    agent any

	stages {
	    stage('Start Pipeline') {
			steps{
                echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL} [Build number: ${env.BUILD_NUMBER}] [Workspace: ${env.WORKSPACE}]"
			}
        }
	    stage('Checkout') {
			steps {
                git url: "https://${gitRepo}",
                        branch: gitBranch,
                        credentialsId: gitCred
            }
        }
	    stage('Build War file') {
			steps {
                dir(cmsPath) {
                    script {
                        sh 'gradle clean war'
                    }

                    archiveArtifacts warPath
                }
            }
        }
	    stage('Javadoc') {
			steps {
                dir(cmsPath) {
                    script {
                        sh 'gradle clean javadoc'
                    }
                    step $class: 'JavadocArchiver',
                            javadocDir: javadocPath,
                            keepAll: false
                }
            }
        }
	    stage('Unit test') {
			steps {
				dir(cmsPath) {
					script {
						sh 'gradle clean test'
						sh 'gradle jacocoTestReport'
						sh 'ls -la ' + unitTestResults // To show the contents on the log before publishing
					}
					junit unitTestResults + '/*.xml'
					publishHTML([
							allowMissing         : false,
							alwaysLinkToLastBuild: false,
							keepAll              : false,
							reportDir            : unitTestReport,
							reportFiles          : 'index.html',
							reportName           : 'Unit Test Coverage HTML Report',
							reportTitles         : ''])
				}
			}
        }
	    stage('Integration test') {
			steps {
		        dir(cmsPath) {
		            script {
		                sh 'gradle clean integrationTest'
		                sh 'gradle jacocoIntegrationReport'
		                sh 'ls -la ' + integrationTestResults
		                // To show the contents on the log before publishing
		            }
		            jacoco buildOverBuild: true,
		                    deltaBranchCoverage: '5',
		                    deltaClassCoverage: '5',
		                    deltaComplexityCoverage: '5',
		                    deltaInstructionCoverage: '5',
		                    deltaLineCoverage: '5',
		                    deltaMethodCoverage: '5',
		                    maximumBranchCoverage: '80',
		                    maximumClassCoverage: '80',
		                    maximumComplexityCoverage: '80',
		                    maximumInstructionCoverage: '80',
		                    maximumLineCoverage: '80',
		                    maximumMethodCoverage: '80',
		                    minimumBranchCoverage: '5',
		                    minimumClassCoverage: '5',
		                    minimumComplexityCoverage: '5',
		                    minimumInstructionCoverage: '5',
		                    minimumLineCoverage: '5',
		                    minimumMethodCoverage: '5'
		            publishHTML([
		                    allowMissing         : false,
		                    alwaysLinkToLastBuild: false,
		                    keepAll              : false,
		                    reportDir            : integrationTestResults,
		                    reportFiles          : 'index.html',
		                    reportName           : 'Integration Test Coverage HTML Report',
		                    reportTitles         : ''])
		        }
		    }
        }
	    stage('Mutation Test') {
			steps {
		        dir(cmsPath) {
		            script {
		                sh 'gradle clean pitest'
		            }
		            publishHTML([
		                    allowMissing         : false,
		                    alwaysLinkToLastBuild: false,
		                    keepAll              : false,
		                    reportDir            : mutationTestResults,
		                    reportFiles          : 'index.html',
		                    reportName           : 'Pit Mutation Test Coverage HTML Report',
		                    reportTitles         : ''])
		        }
		    }
        }
	    stage('Deploy') {
			steps{                
                script{
                	sh 'ls -la *'
                	sh "cp ${jenkinsBuildFolder}/${env.BUILD_NUMBER}/${jenkinsArchiveFolder}/${artifactBuildPath} ${artifactDeployPath}"
                }
			}
        }
	    stage('Smoke test') {
			steps {
                echo 'Waiting 10 seconds before Smoke Test...'
                sleep(
                        time: 10,
                        unit: "SECONDS"
                )
                script {
                    def response = sh(
                            returnStdout: true,
                            script: 'curl --write-out "%{http_code}" --silent --output /dev/null ' + cmsHttp
                    )
                    if (response == "200") {
                        echo 'CMS is up! (HTTP 200)'
                        return true
                    } else {
                        error("Error executing smoke test! Response code: " + response)
                    }
                }
            }
        }
	    stage('Send invite email') {
			steps {
                mail(from: 'notificationsystemisep@gmail.com',
                        to: '1160929@isep.ipp.pt',
                        subject: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) is waiting for approval",
                        body: "The job '${env.JOB_NAME}' is currently building and it's on the Manual Test phase. Please go to ${env.BUILD_URL}. to continue.");
            }
        }
	    stage('Manual Approve') {
			steps{
				input 'Approve deploy?'
			}
        }
        
	    stage('Push tag to bitbucket') {
			steps {
                script {
                    withCredentials([usernamePassword(credentialsId: gitCred, passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh "git tag ScriptedPipeline-Build-${BUILD_NUMBER}"
                        sh "git push https://${gitUsername}:${env.GIT_PASSWORD}@${gitRepo} --tags"
                    }
                }
            }
        }
	}
}
