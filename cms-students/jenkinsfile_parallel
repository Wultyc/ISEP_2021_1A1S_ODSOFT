#!/usr/bin/env groovy 

def credential_ID = '1fb50392-6260-431d-b1e6-ea6a12c9778c' //DeskTop
//def credential_ID = 'a40dafd0-e2c0-4218-8eca-0f4eefc35f17' //LapTop
def git_repo = 'https://bitbucket.org/1160929/odsoft-m1b_g1.git'

def warPath = 'build/libs/cms-students-1.0.war'
def javadocPath = 'build/docs/javadoc/'
def cms2Path = 'cms-students/'
def unitTestResults = 'build/test-results/test'
def unitTestReport = 'build/reports/test'
def integrationTestResults = 'build/test-results/integrationTest'
def mutationTestResults = 'build/reports/pitest'

def jenkinsBuildFolder = "/var/lib/jenkins/jobs/cms2/builds"
def jenkinsArchiveFolder = "archive"
def artifactBuildPath = "build/libs/cms-students-1.0.war"
def artifactDeployPath = "/opt/tomcat/webapps/cms-students.war" 
def cmsHttp = 'http://127.0.0.1:1997/cms-students/'

def email_from = 'notificationsystemisep@gmail.com'
def email_to = '1150639@isep.ipp.pt'

/*
//Push tags to Bitbucket using a script 
def pushBuildStatusTag(){
                script {
                    withCredentials([usernamePassword(credentialsId: '1fb50392-6260-431d-b1e6-ea6a12c9778c', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh "git tag -a Build#${env.BUILD_NUMBER}-currentBuild.result -m 'Jenkins Feedback'"
                        sh "git push https://bitbucket.org/1160929/odsoft-m1b_g1.git --tags"
                    }
                }
}
*/
def pushBuildStatusTag(){
                    sshagent(credentials: '1fb50392-6260-431d-b1e6-ea6a12c9778c') {
                        sh "git tag -a Build#${env.BUILD_NUMBER}-currentBuild.result -m 'Jenkins Feedback'"
                        sh "git push --tags"
                    }
}

pipeline {
	agent any

	stages {
	    stage('Start') {
			steps{
                echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL} [Build number: ${env.BUILD_NUMBER}] [Workspace: ${env.WORKSPACE}]"
			}
        }
        
        stage('Repository Checkout') {
			steps {
                git url: git_repo,
                        branch: 'master',
                        credentialsId: credential_ID
            }
        }
        
        stage('War file') {
			steps {
                dir(cms2Path) {
                    script {
                        sh 'gradle clean build -g gradle-user-home'
                    }

                    archiveArtifacts warPath
                }
            }
        }

/*
        stage('Javadoc') {
			steps {
               			 dir(cms2Path) {
                   			 script {
                       		    sh 'gradle clean javadoc -g gradle-user-home'
                   			 }
					        step $class: 'JavadocArchiver',
                            javadocDir: javadocPath,
                            keepAll: false
               			 }
           		 }
        }
        
        stage('Unit Tests') {
			steps {
                dir(cms2Path) {
					script {
						sh 'gradle clean test -g gradle-user-home'
						sh 'gradle jacocoTestReport -g gradle-user-home'
						sh 'ls -la ' + unitTestResults // To show the contents on the log before publishing
					}
					
                    junit unitTestResults + '/*.xml'
					publishHTML([
							allowMissing         : false,
							alwaysLinkToLastBuild: false,
							keepAll              : false,
							reportDir            : unitTestReport,
							reportFiles          : 'index.html',
							reportName           : 'Unit Test Coverage HTML Report',
							reportTitles         : ''])
				}
            }
        }

        stage('Integration Tests') {
			steps {
				dir(cms2Path){
                    script {
                        sh 'gradle clean integrationTest -g gradle-user-home'
                        sh'gradle jacocoIntegrationReport -g gradle-user-home'
                        sh 'ls -la ' + integrationTestResults
                        //Lista os conteodos dos resultados;
                    }
		            jacoco buildOverBuild: true,
		                    deltaBranchCoverage: '5',
		                    deltaClassCoverage: '5',
		                    deltaComplexityCoverage: '5',
		                    deltaInstructionCoverage: '5',
		                    deltaLineCoverage: '5',
		                    deltaMethodCoverage: '5',
		                    maximumBranchCoverage: '80',
		                    maximumClassCoverage: '80',
		                    maximumComplexityCoverage: '80',
		                    maximumInstructionCoverage: '80',
		                    maximumLineCoverage: '80',
		                    maximumMethodCoverage: '80',
		                    minimumBranchCoverage: '5',
		                    minimumClassCoverage: '5',
		                    minimumComplexityCoverage: '5',
		                    minimumInstructionCoverage: '5',
		                    minimumLineCoverage: '5',
		                    minimumMethodCoverage: '5'
		            publishHTML([
		                    allowMissing         : false,
		                    alwaysLinkToLastBuild: false,
		                    keepAll              : false,
		                    reportDir            : integrationTestResults,
		                    reportFiles          : 'index.html',
		                    reportName           : 'Integration Test Coverage HTML Report',
		                    reportTitles         : ''])
                }
   			 }
		} 
        
        stage('Mutation Tests') {
			steps {
		        dir(cms2Path) {
		            script {
		                sh 'gradle clean pitest -g gradle-user-home'
		            }

		            publishHTML([
		                    allowMissing         : false,
		                    alwaysLinkToLastBuild: false,
		                    keepAll              : false,
		                    reportDir            : mutationTestResults,
		                    reportFiles          : 'index.html',
		                    reportName           : 'Pit Mutation Test Coverage HTML Report',
		                    reportTitles         : ''])
		        }
		    }
        }
    */
        stage('Deploy to TomCat') {
			steps{                
                script{
                	sh 'ls -la *'
                    sh "cp ${jenkinsBuildFolder}/${env.BUILD_NUMBER}/${jenkinsArchiveFolder}/${artifactBuildPath} ${artifactDeployPath}"
                }
			}
        }

	    stage('Smoke test') {
			steps {
                echo 'Waiting 10 seconds before Smoke Test...'
                sleep(
                        time: 10,
                        unit: "SECONDS"
                )
                script {
                    def response = sh(
                            returnStdout: true,
                            script: 'curl --write-out "%{http_code}" --silent --output /dev/null ' + cmsHttp
                    )
                    if (response == "200") {
                        echo 'CMS is up! (HTTP 200)'
                        return true
                    } else {
                        error("Error executing smoke test! Response code: " + response)
                    }
                }
            }
        }

        stage('Email notification for manual test') {
			steps {
                emailext(
                        from: email_from,
                        to: email_to,
                        subject: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) is waiting for approval",
                        body: "The job '${env.JOB_NAME}' is currently building and it's on the Manual Test phase. Please go to ${env.BUILD_URL}. to continue.");
            }
        }
	
        stage('Manual Approve') {
			steps{
				input 'Approve deploy?'
			}
        }
	}
    post {
        success {
            pushBuildStatusTag()
        }
        failure {
            pushBuildStatusTag()
        }
    }
}
